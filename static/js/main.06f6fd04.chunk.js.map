{"version":3,"sources":["hoc/Auxillary.js","components/WeekContainer/Card.js","components/WeekContainer/WeekContainer.js","components/Nav/Nav.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["aux","props","children","moment","require","DayWeather","reading","newDate","Date","weekDay","dt","setTime","Container","Row","Col","md","Card","className","Body","Title","format","Text","Math","round","main","temp","weather","description","humidity","WeekContainer","state","fullData","dailyData","componentDidMount","fetch","then","res","json","data","list","filter","dt_txt","includes","setState","console","log","formatDayCards","map","index","key","this","Component","Navs","Navbar","Brand","Footer","fluid","style","fontFamily","fontSize","padding","color","target","href","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.06f6fd04.chunk.js","sourcesContent":["const aux = (props) => props.children;\r\n\r\nexport default aux;","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { FaMapMarkerAlt } from \"react-icons/fa\";\r\nimport { FaCloudSun } from \"react-icons/fa\";\r\nimport { FaClock } from \"react-icons/fa\";\r\nimport './WeatherCard.css'\r\n\r\nvar moment = require('moment');\r\n\r\nconst DayWeather = ({reading}) => {\r\n\tlet newDate = new Date();\r\n\tconst weekDay = reading.dt*1000;\r\n\tnewDate.setTime(weekDay);\r\n\t\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col md = {12}>\r\n\t\t\t\t\t\t\t<Card className = \"WeatherCard\">\r\n\t\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t\t<Card.Title><p><FaClock/> {moment(newDate).format('dddd')} {moment(newDate).format('MMMM Do, h:mm a')}</p></Card.Title>\r\n\t\t\t\t\t\t\t\t\t<Card.Text>\r\n\t\t\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t\t\t<h3><FaMapMarkerAlt/> Mumbai</h3>\r\n\t\t\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t\t\t<h1><b>{Math.round(reading.main.temp)}Â°C</b></h1>\r\n\t\t\t\t\t\t\t\t\t\t<p><FaCloudSun/> {reading.weather[0].description}</p>\r\n\t\t\t\t\t\t\t\t\t\t<p>Humidity: {reading.main.humidity} %</p>\r\n\t\t\t\t\t\t\t\t\t</Card.Text>\r\n\t\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Container>\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default DayWeather;","import React, {Component} from 'react';\r\nimport Card from './Card';\r\n\r\nclass WeekContainer extends Component{\r\n    \r\n\tstate = {\r\n    \tfullData:[],\r\n    \tdailyData:[]\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        \r\n    \tconst weatherURL = \"http://api.openweathermap.org/data/2.5/forecast?q=Mumbai&units=metric&appid=234cd5e4b17111772bb2c1bba23a975a\"\r\n\t\t\r\n\t\tfetch(weatherURL)\r\n\t\t    .then(res => res.json())\r\n\t\t    .then(data => {\r\n\t\t    \tconst dailyData = data.list.filter(reading => reading.dt_txt.includes(\"12:00:00\"))\r\n\t\t    \tthis.setState({\r\n\t\t    \t\tfullData: data.list,\r\n\t\t    \t\tdailyData: dailyData\r\n\t\t    \t}, () => console.log(this.state))\r\n\t\t    }) \t\t\r\n    }\r\n\r\n    formatDayCards = () => {\r\n    \treturn this.state.dailyData.map((reading,index) => {\r\n    \t\treturn <Card reading = {reading} key = {index}/>\r\n    \t})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        \t<div>\r\n          \t\t{this.formatDayCards()}\r\n          \t</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WeekContainer;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport { FaLeaf } from \"react-icons/fa\";\r\nimport './Nav.css'\r\nimport Aux from '../../hoc/Auxillary';\r\n\r\nconst Navs = (props) => (\r\n\t<Aux>\r\n\t\t<Navbar className = \"Navbar justify-content-center\">\r\n\t\t\t<Navbar.Brand className = \"NavItem\">Weather <FaLeaf/></Navbar.Brand>\r\n\t\t</Navbar>\r\n\t</Aux>\r\n)\r\n\r\nexport default Navs;","import React from 'react';\r\nimport './Footer.css'\r\nimport Aux from '../../hoc/Auxillary'\r\nimport { FaReact } from \"react-icons/fa\";\r\nimport { FaGithub } from \"react-icons/fa\";\r\nimport { FaInstagram } from \"react-icons/fa\";\r\nimport { FaTwitter } from \"react-icons/fa\";\r\nimport { FaGlobe } from \"react-icons/fa\";\r\nimport { FaLeaf } from \"react-icons/fa\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst Footer = (props) => (\r\n\t<Aux>\r\n\t\t<div className = \"Footer\">\r\n\t\t\t<Container fluid>\r\n\t\t\t\t<h3>About <h3 style = {{fontFamily:\"Pacifico\"}}>Weather <FaLeaf/></h3></h3>\r\n\t\t\t\t<hr/>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col md = {6}>\r\n\t\t\t\t\t\t\t<h6 className = \"bio\">\r\n\t\t\t\t\t\t\t\tWeather is a Weather App that brings you forecast for 5 days, currently only weather for Mumbai is available.\r\n\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\tWeather is created with the OpenWeatherMap API.\r\n\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\tThis website is created with <FaReact/> ReactJS and MomentJS.\r\n\t\t\t\t\t\t\t</h6>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t<Col md = {1}></Col>\r\n\t\t\t\t\t\t<Col md = {5}>\r\n\t\t\t\t\t\t\t<h4>Connect with me</h4>\r\n\t\t\t\t\t\t\t<hr/>\r\n\t\t\t\t\t\t\t<FaGlobe style = {{fontSize:\"40px\",padding:\"10px\"}} className=\"d-inline float\"/>\r\n\t\t\t\t\t\t\t<a style = {{padding:\"10px\", color:\"#fff\"}} target = \"_blank\" className = \"d-inline\" href = \"https://chinmaykarmokar.github.io/app/\">Visit my portfolio</a>\r\n\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t<a href=\"https://github.com/chinmaykarmokar/\" target=\"_blank\"><FaGithub style={{fontSize:\"60px\",padding:\"10px\"}}/></a>\r\n\t\t\t\t\t\t\t<a href=\"https://twitter.com/chinmaykarmokar\" target=\"_blank\"><FaTwitter style={{fontSize:\"60px\",padding:\"10px\"}}/></a>\r\n\t\t\t\t\t\t\t<a href=\"https://www.instagram.com/chinmay.js/\" target=\"_blank\"><FaInstagram style={{fontSize:\"60px\",padding:\"10px\"}}/></a>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t</Container>\r\n\t\t</div>\r\n\t</Aux>\r\n)\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Aux from './hoc/Auxillary'\nimport WeekContainer from './components/WeekContainer/WeekContainer'\nimport Navs from './components/Nav/Nav'\nimport Footer from './components/Footer/Footer'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component{\n    render(){\n        return(\n        \t<Aux>\n        \t\t<Navs/>\n       \t\t\t<WeekContainer/>\n       \t\t\t<br/>\n       \t\t\t<Footer/>\n       \t\t</Aux>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}